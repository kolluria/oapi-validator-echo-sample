// Package servergen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package servergen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new pet to the store
	// (POST /pet)
	AddPet(ctx echo.Context) error
	// Update an existing pet
	// (PUT /pet)
	UpdatePet(ctx echo.Context) error
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(ctx echo.Context, params FindPetsByStatusParams) error
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(ctx echo.Context, params FindPetsByTagsParams) error
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(ctx echo.Context, petId int64, params DeletePetParams) error
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetById(ctx echo.Context, petId int64) error
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(ctx echo.Context, petId int64, params UpdatePetWithFormParams) error
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(ctx echo.Context, petId int64, params UploadFileParams) error
	// Returns pet inventories by status
	// (GET /store/inventory)
	GetInventory(ctx echo.Context) error
	// Place an order for a pet
	// (POST /store/order)
	PlaceOrder(ctx echo.Context) error
	// Delete purchase order by ID
	// (DELETE /store/order/{orderId})
	DeleteOrder(ctx echo.Context, orderId int64) error
	// Find purchase order by ID
	// (GET /store/order/{orderId})
	GetOrderById(ctx echo.Context, orderId int64) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(ctx echo.Context) error
	// Logs user into the system
	// (GET /user/login)
	LoginUser(ctx echo.Context, params LoginUserParams) error
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(ctx echo.Context) error
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx echo.Context, username string) error
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx echo.Context, username string) error
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx echo.Context, username string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// UpdatePet converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePet(ctx echo.Context) error {
	var err error

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePet(ctx)
	return err
}

// FindPetsByStatus converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetsByStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByStatusParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetsByStatus(ctx, params)
	return err
}

// FindPetsByTags converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetsByTags(ctx echo.Context) error {
	var err error

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByTagsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetsByTags(ctx, params)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePetParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for api_key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, valueList[0], &ApiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api_key: %s", err))
		}

		params.ApiKey = &ApiKey
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, petId, params)
	return err
}

// GetPetById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPetById(ctx, petId)
	return err
}

// UpdatePetWithForm converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePetWithForm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePetWithFormParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePetWithForm(ctx, petId, params)
	return err
}

// UploadFile converts echo context to params.
func (w *ServerInterfaceWrapper) UploadFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, ctx.Param("petId"), &petId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter petId: %s", err))
	}

	ctx.Set(Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFileParams
	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", ctx.QueryParams(), &params.AdditionalMetadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter additionalMetadata: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadFile(ctx, petId, params)
	return err
}

// GetInventory converts echo context to params.
func (w *ServerInterfaceWrapper) GetInventory(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInventory(ctx)
	return err
}

// PlaceOrder converts echo context to params.
func (w *ServerInterfaceWrapper) PlaceOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PlaceOrder(ctx)
	return err
}

// DeleteOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOrder(ctx, orderId)
	return err
}

// GetOrderById converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, ctx.Param("orderId"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrderById(ctx, orderId)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// CreateUsersWithListInput converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUsersWithListInput(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUsersWithListInput(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams
	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", ctx.QueryParams(), &params.Password)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter password: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx, params)
	return err
}

// LogoutUser converts echo context to params.
func (w *ServerInterfaceWrapper) LogoutUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LogoutUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, username)
	return err
}

// GetUserByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserByName(ctx, username)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, username)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/pet", wrapper.AddPet)
	router.PUT(baseURL+"/pet", wrapper.UpdatePet)
	router.GET(baseURL+"/pet/findByStatus", wrapper.FindPetsByStatus)
	router.GET(baseURL+"/pet/findByTags", wrapper.FindPetsByTags)
	router.DELETE(baseURL+"/pet/:petId", wrapper.DeletePet)
	router.GET(baseURL+"/pet/:petId", wrapper.GetPetById)
	router.POST(baseURL+"/pet/:petId", wrapper.UpdatePetWithForm)
	router.POST(baseURL+"/pet/:petId/uploadImage", wrapper.UploadFile)
	router.GET(baseURL+"/store/inventory", wrapper.GetInventory)
	router.POST(baseURL+"/store/order", wrapper.PlaceOrder)
	router.DELETE(baseURL+"/store/order/:orderId", wrapper.DeleteOrder)
	router.GET(baseURL+"/store/order/:orderId", wrapper.GetOrderById)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/createWithList", wrapper.CreateUsersWithListInput)
	router.GET(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/logout", wrapper.LogoutUser)
	router.DELETE(baseURL+"/user/:username", wrapper.DeleteUser)
	router.GET(baseURL+"/user/:username", wrapper.GetUserByName)
	router.PUT(baseURL+"/user/:username", wrapper.UpdateUser)

}

type AddPetRequestObject struct {
	JSONBody     *AddPetJSONRequestBody
	FormdataBody *AddPetFormdataRequestBody
}

type AddPetResponseObject interface {
	VisitAddPetResponse(w http.ResponseWriter) error
}

type AddPet200JSONResponse Pet

func (response AddPet200JSONResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddPet405Response struct {
}

func (response AddPet405Response) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type UpdatePetRequestObject struct {
	JSONBody     *UpdatePetJSONRequestBody
	FormdataBody *UpdatePetFormdataRequestBody
}

type UpdatePetResponseObject interface {
	VisitUpdatePetResponse(w http.ResponseWriter) error
}

type UpdatePet200JSONResponse Pet

func (response UpdatePet200JSONResponse) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePet400Response struct {
}

func (response UpdatePet400Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePet404Response struct {
}

func (response UpdatePet404Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePet405Response struct {
}

func (response UpdatePet405Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type FindPetsByStatusRequestObject struct {
	Params FindPetsByStatusParams
}

type FindPetsByStatusResponseObject interface {
	VisitFindPetsByStatusResponse(w http.ResponseWriter) error
}

type FindPetsByStatus200JSONResponse []Pet

func (response FindPetsByStatus200JSONResponse) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindPetsByStatus400Response struct {
}

func (response FindPetsByStatus400Response) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FindPetsByTagsRequestObject struct {
	Params FindPetsByTagsParams
}

type FindPetsByTagsResponseObject interface {
	VisitFindPetsByTagsResponse(w http.ResponseWriter) error
}

type FindPetsByTags200JSONResponse []Pet

func (response FindPetsByTags200JSONResponse) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindPetsByTags400Response struct {
}

func (response FindPetsByTags400Response) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeletePetRequestObject struct {
	PetId  int64 `json:"petId"`
	Params DeletePetParams
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(w http.ResponseWriter) error
}

type DeletePet400Response struct {
}

func (response DeletePet400Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetByIdRequestObject struct {
	PetId int64 `json:"petId"`
}

type GetPetByIdResponseObject interface {
	VisitGetPetByIdResponse(w http.ResponseWriter) error
}

type GetPetById200JSONResponse Pet

func (response GetPetById200JSONResponse) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPetById400Response struct {
}

func (response GetPetById400Response) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetById404Response struct {
}

func (response GetPetById404Response) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePetWithFormRequestObject struct {
	PetId  int64 `json:"petId"`
	Params UpdatePetWithFormParams
}

type UpdatePetWithFormResponseObject interface {
	VisitUpdatePetWithFormResponse(w http.ResponseWriter) error
}

type UpdatePetWithForm405Response struct {
}

func (response UpdatePetWithForm405Response) VisitUpdatePetWithFormResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type UploadFileRequestObject struct {
	PetId  int64 `json:"petId"`
	Params UploadFileParams
	Body   io.Reader
}

type UploadFileResponseObject interface {
	VisitUploadFileResponse(w http.ResponseWriter) error
}

type UploadFile200JSONResponse ApiResponse

func (response UploadFile200JSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInventoryRequestObject struct {
}

type GetInventoryResponseObject interface {
	VisitGetInventoryResponse(w http.ResponseWriter) error
}

type GetInventory200JSONResponse map[string]int32

func (response GetInventory200JSONResponse) VisitGetInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaceOrderRequestObject struct {
	JSONBody     *PlaceOrderJSONRequestBody
	FormdataBody *PlaceOrderFormdataRequestBody
}

type PlaceOrderResponseObject interface {
	VisitPlaceOrderResponse(w http.ResponseWriter) error
}

type PlaceOrder200JSONResponse Order

func (response PlaceOrder200JSONResponse) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaceOrder405Response struct {
}

func (response PlaceOrder405Response) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type DeleteOrderRequestObject struct {
	OrderId int64 `json:"orderId"`
}

type DeleteOrderResponseObject interface {
	VisitDeleteOrderResponse(w http.ResponseWriter) error
}

type DeleteOrder400Response struct {
}

func (response DeleteOrder400Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteOrder404Response struct {
}

func (response DeleteOrder404Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetOrderByIdRequestObject struct {
	OrderId int64 `json:"orderId"`
}

type GetOrderByIdResponseObject interface {
	VisitGetOrderByIdResponse(w http.ResponseWriter) error
}

type GetOrderById200JSONResponse Order

func (response GetOrderById200JSONResponse) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrderById400Response struct {
}

func (response GetOrderById400Response) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetOrderById404Response struct {
}

func (response GetOrderById404Response) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUserdefaultJSONResponse struct {
	Body       User
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUsersWithListInputRequestObject struct {
	Body *CreateUsersWithListInputJSONRequestBody
}

type CreateUsersWithListInputResponseObject interface {
	VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error
}

type CreateUsersWithListInput200JSONResponse User

func (response CreateUsersWithListInput200JSONResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsersWithListInputdefaultResponse struct {
	StatusCode int
}

func (response CreateUsersWithListInputdefaultResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LoginUserRequestObject struct {
	Params LoginUserParams
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200ResponseHeaders struct {
	XExpiresAfter time.Time
	XRateLimit    int32
}

type LoginUser200JSONResponse struct {
	Body    string
	Headers LoginUser200ResponseHeaders
}

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("X-Expires-After", fmt.Sprint(response.Headers.XExpiresAfter))
	w.Header().Set("X-Rate-Limit", fmt.Sprint(response.Headers.XRateLimit))
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoginUser400Response struct {
}

func (response LoginUser400Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LogoutUserRequestObject struct {
}

type LogoutUserResponseObject interface {
	VisitLogoutUserResponse(w http.ResponseWriter) error
}

type LogoutUserdefaultResponse struct {
	StatusCode int
}

func (response LogoutUserdefaultResponse) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteUserRequestObject struct {
	Username string `json:"username"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser400Response struct {
}

func (response DeleteUser400Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteUser404Response struct {
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserByNameRequestObject struct {
	Username string `json:"username"`
}

type GetUserByNameResponseObject interface {
	VisitGetUserByNameResponse(w http.ResponseWriter) error
}

type GetUserByName200JSONResponse User

func (response GetUserByName200JSONResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByName400Response struct {
}

func (response GetUserByName400Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserByName404Response struct {
}

func (response GetUserByName404Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateUserRequestObject struct {
	Username     string `json:"username"`
	JSONBody     *UpdateUserJSONRequestBody
	FormdataBody *UpdateUserFormdataRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUserdefaultResponse struct {
	StatusCode int
}

func (response UpdateUserdefaultResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new pet to the store
	// (POST /pet)
	AddPet(ctx context.Context, request AddPetRequestObject) (AddPetResponseObject, error)
	// Update an existing pet
	// (PUT /pet)
	UpdatePet(ctx context.Context, request UpdatePetRequestObject) (UpdatePetResponseObject, error)
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(ctx context.Context, request FindPetsByStatusRequestObject) (FindPetsByStatusResponseObject, error)
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(ctx context.Context, request FindPetsByTagsRequestObject) (FindPetsByTagsResponseObject, error)
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetById(ctx context.Context, request GetPetByIdRequestObject) (GetPetByIdResponseObject, error)
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(ctx context.Context, request UpdatePetWithFormRequestObject) (UpdatePetWithFormResponseObject, error)
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(ctx context.Context, request UploadFileRequestObject) (UploadFileResponseObject, error)
	// Returns pet inventories by status
	// (GET /store/inventory)
	GetInventory(ctx context.Context, request GetInventoryRequestObject) (GetInventoryResponseObject, error)
	// Place an order for a pet
	// (POST /store/order)
	PlaceOrder(ctx context.Context, request PlaceOrderRequestObject) (PlaceOrderResponseObject, error)
	// Delete purchase order by ID
	// (DELETE /store/order/{orderId})
	DeleteOrder(ctx context.Context, request DeleteOrderRequestObject) (DeleteOrderResponseObject, error)
	// Find purchase order by ID
	// (GET /store/order/{orderId})
	GetOrderById(ctx context.Context, request GetOrderByIdRequestObject) (GetOrderByIdResponseObject, error)
	// Create user
	// (POST /user)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(ctx context.Context, request CreateUsersWithListInputRequestObject) (CreateUsersWithListInputResponseObject, error)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(ctx context.Context, request LogoutUserRequestObject) (LogoutUserResponseObject, error)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx context.Context, request GetUserByNameRequestObject) (GetUserByNameResponseObject, error)
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddPet operation middleware
func (sh *strictHandler) AddPet(ctx echo.Context) error {
	var request AddPetRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AddPetJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body AddPetFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddPet(ctx.Request().Context(), request.(AddPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddPetResponseObject); ok {
		return validResponse.VisitAddPetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdatePet operation middleware
func (sh *strictHandler) UpdatePet(ctx echo.Context) error {
	var request UpdatePetRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body UpdatePetJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body UpdatePetFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePet(ctx.Request().Context(), request.(UpdatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePetResponseObject); ok {
		return validResponse.VisitUpdatePetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FindPetsByStatus operation middleware
func (sh *strictHandler) FindPetsByStatus(ctx echo.Context, params FindPetsByStatusParams) error {
	var request FindPetsByStatusRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindPetsByStatus(ctx.Request().Context(), request.(FindPetsByStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPetsByStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindPetsByStatusResponseObject); ok {
		return validResponse.VisitFindPetsByStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FindPetsByTags operation middleware
func (sh *strictHandler) FindPetsByTags(ctx echo.Context, params FindPetsByTagsParams) error {
	var request FindPetsByTagsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindPetsByTags(ctx.Request().Context(), request.(FindPetsByTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPetsByTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindPetsByTagsResponseObject); ok {
		return validResponse.VisitFindPetsByTagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(ctx echo.Context, petId int64, params DeletePetParams) error {
	var request DeletePetRequestObject

	request.PetId = petId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx.Request().Context(), request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		return validResponse.VisitDeletePetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPetById operation middleware
func (sh *strictHandler) GetPetById(ctx echo.Context, petId int64) error {
	var request GetPetByIdRequestObject

	request.PetId = petId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetById(ctx.Request().Context(), request.(GetPetByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPetByIdResponseObject); ok {
		return validResponse.VisitGetPetByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdatePetWithForm operation middleware
func (sh *strictHandler) UpdatePetWithForm(ctx echo.Context, petId int64, params UpdatePetWithFormParams) error {
	var request UpdatePetWithFormRequestObject

	request.PetId = petId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePetWithForm(ctx.Request().Context(), request.(UpdatePetWithFormRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePetWithForm")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePetWithFormResponseObject); ok {
		return validResponse.VisitUpdatePetWithFormResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UploadFile operation middleware
func (sh *strictHandler) UploadFile(ctx echo.Context, petId int64, params UploadFileParams) error {
	var request UploadFileRequestObject

	request.PetId = petId
	request.Params = params

	request.Body = ctx.Request().Body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFile(ctx.Request().Context(), request.(UploadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadFileResponseObject); ok {
		return validResponse.VisitUploadFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetInventory operation middleware
func (sh *strictHandler) GetInventory(ctx echo.Context) error {
	var request GetInventoryRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInventory(ctx.Request().Context(), request.(GetInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInventory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInventoryResponseObject); ok {
		return validResponse.VisitGetInventoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PlaceOrder operation middleware
func (sh *strictHandler) PlaceOrder(ctx echo.Context) error {
	var request PlaceOrderRequestObject

	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body PlaceOrderJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body PlaceOrderFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PlaceOrder(ctx.Request().Context(), request.(PlaceOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaceOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PlaceOrderResponseObject); ok {
		return validResponse.VisitPlaceOrderResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteOrder operation middleware
func (sh *strictHandler) DeleteOrder(ctx echo.Context, orderId int64) error {
	var request DeleteOrderRequestObject

	request.OrderId = orderId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrder(ctx.Request().Context(), request.(DeleteOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteOrderResponseObject); ok {
		return validResponse.VisitDeleteOrderResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetOrderById operation middleware
func (sh *strictHandler) GetOrderById(ctx echo.Context, orderId int64) error {
	var request GetOrderByIdRequestObject

	request.OrderId = orderId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrderById(ctx.Request().Context(), request.(GetOrderByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrderById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOrderByIdResponseObject); ok {
		return validResponse.VisitGetOrderByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateUsersWithListInput operation middleware
func (sh *strictHandler) CreateUsersWithListInput(ctx echo.Context) error {
	var request CreateUsersWithListInputRequestObject

	var body CreateUsersWithListInputJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUsersWithListInput(ctx.Request().Context(), request.(CreateUsersWithListInputRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUsersWithListInput")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUsersWithListInputResponseObject); ok {
		return validResponse.VisitCreateUsersWithListInputResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(ctx echo.Context, params LoginUserParams) error {
	var request LoginUserRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx.Request().Context(), request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		return validResponse.VisitLoginUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// LogoutUser operation middleware
func (sh *strictHandler) LogoutUser(ctx echo.Context) error {
	var request LogoutUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LogoutUser(ctx.Request().Context(), request.(LogoutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogoutUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutUserResponseObject); ok {
		return validResponse.VisitLogoutUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx echo.Context, username string) error {
	var request DeleteUserRequestObject

	request.Username = username

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.Request().Context(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		return validResponse.VisitDeleteUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUserByName operation middleware
func (sh *strictHandler) GetUserByName(ctx echo.Context, username string) error {
	var request GetUserByNameRequestObject

	request.Username = username

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByName(ctx.Request().Context(), request.(GetUserByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserByNameResponseObject); ok {
		return validResponse.VisitGetUserByNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx echo.Context, username string) error {
	var request UpdateUserRequestObject

	request.Username = username
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body UpdateUserJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if form, err := ctx.FormParams(); err == nil {
			var body UpdateUserFormdataRequestBody
			if err := runtime.BindForm(&body, form, nil, nil); err != nil {
				return err
			}
			request.FormdataBody = &body
		} else {
			return err
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.Request().Context(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		return validResponse.VisitUpdateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
